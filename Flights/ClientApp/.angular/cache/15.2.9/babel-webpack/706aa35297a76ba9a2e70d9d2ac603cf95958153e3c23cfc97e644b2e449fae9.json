{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class PermissionsService {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    if (!this.authService.currentUser) this.router.navigate(['register-passenger']);\n    return true;\n  }\n}\n_class = PermissionsService;\n_class.ɵfac = function PermissionsService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const AuthGaurd = (next, state) => {\n  return inject(PermissionsService).canActivate(next, state);\n};","map":{"version":3,"mappings":";;;;AAQA,OAAM,MAAOA,kBAAkB;EAE7BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAY;EAExEC,WAAW,CAACC,IAA4B,EAAEC,KAA0B;IAElE,IAAI,CAAC,IAAI,CAACJ,WAAW,CAACK,WAAW,EAC/B,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,oBAAoB,CAAC,CAAC;IAE9C,OAAO,IAAI;EACb;;SAVWR,kBAAkB;;mBAAlBA,MAAkB;AAAA;;SAAlBA,MAAkB;EAAAS,SAAlBT,MAAkB;EAAAU,YAFjB;AAAM;AAgBpB,OAAO,MAAMC,SAAS,GAAkB,CACtCN,IAA4B,EAC5BC,KAA0B,KAAI;EAC9B,OAAOM,MAAM,CAACZ,kBAAkB,CAAC,CAACI,WAAW,CAACC,IAAI,EAAEC,KAAK,CAAC;AAC1D,CAAC","names":["PermissionsService","constructor","authService","router","canActivate","next","state","currentUser","navigate","factory","providedIn","AuthGaurd","inject"],"sourceRoot":"","sources":["C:\\Users\\Marc Angelo\\source\\repos\\Flights\\Flights\\ClientApp\\src\\app\\auth\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateFn, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PermissionsService {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n\n    if (!this.authService.currentUser)\n      this.router.navigate(['register-passenger'])\n\n    return true;\n  }\n\n}\n\nexport const AuthGaurd: CanActivateFn = (\r\n  next: ActivatedRouteSnapshot,\r\n  state: RouterStateSnapshot) => {\n  return inject(PermissionsService).canActivate(next, state);\r\n  }\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}